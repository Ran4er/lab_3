<project name="web_3" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- Загрузка параметров -->
    <property file="build.properties"/>

    <!-- Инициализация Ivy -->
    <target name="ivy-init">
        <ivy:configure />
        <ivy:resolve />
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]" sync="true"/>
    </target>

    <!-- Путь к зависимостям -->
    <path id="libs.main.module">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="libraries">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- Подключение Ant-Contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib.jar}"/>
        </classpath>
    </taskdef>

    <!-- Цель compile -->
    <target name="compile" depends="ivy-init">
        <mkdir dir="${build.dir}/classes"/>
        <javac srcdir="${src.dir}/java"
               destdir="${build.dir}/classes"
               includeantruntime="false"
               debug="true">
            <classpath refid="libs.main.module"/>
            <compilerarg value="-Xplugin:lombok"/> <!-- Обработка Lombok -->
        </javac>
        <copy todir="${build.dir}/classes">
            <fileset dir="${src.dir}/resources"/>
        </copy>
    </target>

    <!-- Цель build -->
    <target name="build" depends="compile">
        <jar destfile="${build.dir}/${jar.name}" basedir="${build.dir}/classes">
            <manifest>
                <attribute name="Main-Class" value="${mainClass}"/>
                <attribute name="Package-Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

    <!-- Цель clean -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${errors.dir}"/>
        <delete dir="${team.dir}"/>
        <delete dir="${zip.dir}"/>
        <delete file="MANIFEST.MF"/>
    </target>

    <!-- Цель test -->
    <target name="test" depends="build">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="${test.dir}/java"
               destdir="${build.dir}/test-classes"
               includeantruntime="false">
            <classpath>
                <path refid="libs.main.module"/>
                <pathelement location="${build.dir}/classes"/>
            </classpath>
        </javac>
        <junit printsummary="yes" fork="true">
            <classpath>
                <path refid="libs.main.module"/>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test-classes"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest todir="${errors.dir}">
                <fileset dir="${test.dir}/java" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>

    <!-- Цель music -->
    <target name="music" depends="build">
        <sound>
            <success source="${music.dir}/success_2.wav"/>
        </sound>
    </target>

    <!-- Цель team -->
    <target name="team" depends="build">
        <mkdir dir="${team.dir}"/>
        <exec executable="git" outputproperty="git.current.rev">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <for param="i" list="0,1,2,3">
            <sequential>
                <exec executable="git">
                    <arg value="checkout"/>
                    <arg value="HEAD~@{i}"/>
                </exec>
                <antcall target="build"/>
                <move file="${build.dir}/${jar.name}" tofile="${team.dir}/revision_@{i}.jar"/>
            </sequential>
        </for>

        <exec executable="git">
            <arg value="checkout"/>
            <arg value="${git.current.rev}"/>
        </exec>

        <zip destfile="${zip.dir}/jars.zip" basedir="${team.dir}"/>
    </target>

</project>

    <!-- team - осуществляет получение из git-репозитория 4 предыдущих ревизий, их сборку (по аналогии с основной) и упаковку получившихся jar-файлов в zip-архив -->
<!--    <target name="team">-->

<!--        &lt;!&ndash; создание директории для jar-ревизий &ndash;&gt;-->
<!--        <mkdir dir="${team.dir}"/>-->

<!--        &lt;!&ndash; получение хэша последнего коммита &ndash;&gt;-->
<!--        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">-->
<!--            <arg value="describe"/>-->
<!--            <arg value="&#45;&#45;tags"/>-->
<!--            <arg value="&#45;&#45;always"/>-->
<!--            <arg value="HEAD"/>-->
<!--        </exec>-->

<!--        &lt;!&ndash; цикл для 4 ревизий &ndash;&gt;-->
<!--        <for list="0,1,2,3" param="revision">-->
<!--            <sequential>-->

<!--                &lt;!&ndash; получение хэша ревизии &ndash;&gt;-->
<!--                <exec executable="git">-->
<!--                    <arg value="checkout"/>-->
<!--                    <arg value="HEAD~@{revision}"/>-->
<!--                </exec>-->

<!--                &lt;!&ndash; сборка jar-ника и перенос его в каталог ${team.dir} для сохранения архивов ревизий &ndash;&gt;-->
<!--                <antcall target="build"/>-->
<!--                <move file="${build.dir}${jar.name}" todir="${team.dir}"/>-->
<!--                <move file="${team.dir}${jar.name}" tofile="${team.dir}/@{revision}.jar"/>-->
<!--            </sequential>-->
<!--        </for>-->

<!--        &lt;!&ndash; переключение на главную ветку &ndash;&gt;-->
<!--        <exec executable="git" command="git checkout ${git.revision}"/>-->
<!--        <exec executable="git" command="git switch master"/>-->

<!--        &lt;!&ndash; упаковка ревизий в зип &ndash;&gt;-->
<!--        <zip destfile="zip-file/jars.zip" basedir="${team.dir}"/>-->
<!--    </target>-->